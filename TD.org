#+TITLE : Prise de notes TD 4I100 ARCHI1
#+PROPERTY: header-args :mkdirp yes
#+STARTUP: inlineimages

* Séance 1 : 24/09/2019

** TD 1

La difficulté de la conception de MIPS, c'est de concevoir un jeu d'instructions qui tiennent toutes en 32 bits.

*** Exercice 1

#+BEGIN_SRC asm
  lui R5, 0
#+END_SRC

Il y a plein de possibilités pour initialiser R5 à 0.

Apparemment, lui n'est pas la manière canonique de régler le problème. On préfère les opérations logiques bit par bit.

#+BEGIN_SRC asm
  Xor R5, R5, R5
#+END_SRC

*** Exercice 2

#+BEGIN_SRC asm
  Add R5, R6, R0
#+END_SRC

#+BEGIN_SRC asm
  Or R5, R6, R0
#+END_SRC

*** Exercice 3

La bonne manière :

#+BEGIN_SRC asm
	  Ori R5, R0, 0x4567
#+END_SRC

La manière :

#+BEGIN_SRC asm
	  Addi R5, R0, 0x4567
#+END_SRC

*** Exercice 4

#+BEGIN_SRC asm
	    Lui R5, 0x4567
	    Ori R5, R5, 0xABCD
#+END_SRC

*** Exercice 5

Compilation à la main.

#+BEGIN_SRC mips
	  OR          R9, R4, R0
  Boucle: LB          R8, 0(R9)
	  BEQ         R8, R0, fin
	  ADDIU       R9, R9, 1
	  J           Boucle
  Fin:    SUB         R2, R9, R4
#+END_SRC


#+BEGIN_SRC mips
	  ADDIU       RS,R4,-1
  Boucle: ADDIU       R2,R2,1
	  LB          R8,0(R2)
	  BNE         R8, R0, Boucle
	  SUB         R2,R2,R4
#+END_SRC

*** Exercice 6

Recopie de chaîne de caractères.

Solution Agon-Rambosson

#+BEGIN_SRC mips
	  OR          R8,R5,R0
	  OR          R9,R4,R0
  Boucle: LB          R10,0(R8)
	  BEQ         R10,R0,fin
	  SB          R10,0(R9)
	  ADDIU       R9,R9,1
	  ADDIU       R8,R8,1
	  J           Boucle
  Fin:    SB          R0,0(R9)
	  OR          R2,R4,R0
#+END_SRC

On a eu l'idée, probablement un peu difficile à mettre en place pour le moment, d'implémenter un cache dans les registres. Au lieu de charger un octet, on pourrait charger un mot entier, et traiter 8 bits par 8 bits le contenu du registre (un peu sale) : ça permettrait de diviser le nombre d'accès mémoire par 4.

*** Exercice 7

Ecrire la fonction strupper de la bibliothèque standart en assembleur.

On a une condition un peu complexe, qu'on ne pourra pas exprimer en une instruction, et qu'il faudra transformer :

#+BEGIN_SRC c
  char *strupper (char *str)
  {
	  int i = 0;

	  while (str[i] != '\0') {

		  if ((str[i] >= 'a') && (str[i] <= 'z')) {
			  str[i] = str[i] - 'a' + 'A';
		  }

		  i++;
	  }
  }
#+END_SRC

La condition de la ligne 7 du programme doit être traduite en un certain nombre de conditions qui se puissent transcrire en le moins d'instructions asm possible.

En particulier, les seules opérations de comparaison sont slt et ses dérivés : on doit exprimer les conditions sous la forme Reg < Immédiat, ou Reg < Reg.

On a :

(str[i] >= 'a') && (str[i] <= 'z') =
C((str[i] < 'a') || ('z' < str[i]))

C(A || B) = C(A) && c(B)

On peut donc mettre dans un deux registres le résultat de la comparaison (str[i] < 'a') et ('z' < str[i]), en faire l'union dans un des deux registres, puis tester pour la différence avec 0 de ce registre : si le registre contient un entier différent de 0, on exécute à partir de l'étiquette endif.

#+BEGIN_SRC mips
	  ADDU        R2,R0,R4
	  ADDIU       R8,R0,'a'
	  ADDIU       R9,R0,'z'
  loop:   LB          R10,0(R4)
	  SLT         R11,R10,R8
	  SLT         R12,R9,R10
	  OR          R12,R12,R11
	  BNE         R12,R0,endif
	  ADDIU       R10,R10,'A' - 'a'
	  SB          R10,0(R4)
  endif:  ADDIU       R4,R4,1
	  BNE         R10,R0,loop
#+END_SRC

*** Exercice 8

On se propose d'écrire la fonction suivante en assembleur :

#+BEGIN_SRC c
  int *addvect(int *a, int *b, int *c, int size)
  {
	  int i = 0;

	  while (size > 0) {
		  c[i] = 2 * a[i] + 3 * b[i];
		  i++;
		  size--;
	  }

	  return c;
  }
#+END_SRC

La subtilité ici est de ne pas à se servir de mult, qui est une opération coûteuse.

La solution, c'est le décalage des bits à gauche : on se sert des propriétés du binaire.

Multiplication par 2 : décalage de tous les bits à gauche.
Multiplication par 3 : multiplication par 2, puis addition avec l'antécédent.

On a une condition stricte, en revanche :
Vu qu'on fait une multiplication par 2 et une par 3, on doit avoir les deux bits du poids fort à 0, sinon le résultat de la multiplication ne se laisse pas écrire dans les 32 bits du registre.

On part du principe que cette condition est remplie.

Voilà notre solution (un certain nombre d'erreurs du tableau ont été corrigées) :

#+BEGIN_SRC mips
	  OR          R2,R0,R6
  loop:   BLEZ        R7,fin
	  LW          R8,0(R4)
	  LW          R9,0(R5)
	  SLL         R8,R8,1             #R8 contient 2a[i]
	  SLL         R10,R9,1            
	  ADDU        R10,R10,R9          #R10 contient 3b[i]
	  ADDU        R10,R10,R8          #R10 contient 2a[i] + 3b[i]
	  SW          R10,0(R6)
	  ADDIU       R6,R6,4
	  ADDIU       R4,R4,4
	  ADDIU       R5,R5,4
	  ADDIU       R7,R7,-1
	  J           loop
  fin:
#+END_SRC

On se gardera les exercices bonus pour la suite.


* Séance 2 : 01/10/2019

** TD 1, suite

*** Aparté : les registres

Conventions utilisées par GNU Compiler Collection, pour MIPS

| R0        | Registre qui vaut toujours 0                                                                                    |
| R1        | A ne pas utiliser, réservé à l'assembleur.                                                                      |
| R2 - R3   | Valeur de retour de la fonction appelée (R3 est là pour les retours sur 64 bits)                                |
| R4 - R7   | Registre pour passer les 4 premiers paramètres de la fonction appelée (les éventuels suivants sont sur la pile) |
| R8 - R15  | Registres de travail non préservés à travers l'appel d'une fonction (flush à l'entrée d'une fonction)           |
| R16 - R23 | Registres de travail préservés à travers l'appel d'une fonction                                                 |
| R24 - R25 | Comme R8 - R15                                                                                                  |
| R26 - R27 | Ne doivent pas être utilisés par le compilateur                                                                 |
| R28       | GP (Global pointer : pointeur vers les variables globales)                                                      |
| R29       | SP (Stack pointer : pointe sur la pile, là où les données non dynamiques sont stockées et lues)                 |
| R30       | Comme R16 - R23                                                                                                 |
| R31       | Adresse de retour de la fonction appelante                                                                      |

La pile grandit vers le bas.

On doit mettre dans la pile les paramètres de la fonction

#+BEGIN_SRC mips
	  ADDIU       R29,R29,-(n*4)
	  SW          R4,16(R29)
	  SW          R5,12(R29)
	  SW          R6,8(R29)
	  SW          R7,4(R29)
	  SW          R8,0(R29)
	  JAL         @fonction
#+END_SRC

JAL fait deux choses :
- Met PC + 4 dans R31
- Il change le registre PC vers l'adresse passée en paramètre

On doit faire ça nous même :
- Allouer (1 + nb(R à sauver) + nb(VarLoc)) * 4
- Stocker les Registres à sauver
- Stocker les variables locales

Restitution de la fonction :
- On doit charger les registres qui auraient pu être écrasés, depuis la pile
- On bouge le SP vers le haut, de la même quantité qu'on l'avait baissé avant
- On saute à l'adresse contenue dans R31

On a un problème : le registre R8 ne contient pas de paramètre de la fonction appelée. Il est juste autre part dans la pile, il faut aller le chercher : en fait, on suppose gentiment que toutes une série d'opérations chiantes sont faites pour nous, mais pas toutes non plus : à un moment, on décide qu'on doit faire les opérations faites par le compilateur, à un autre, on décide que ce n'est pas la peine, sans logique apparente.

On a en fait toute une série d'instructions *implicites dans les exercices* LW pour charger les paramètres depuis la pile (ce qui requiert qu'on connaisse leur adresse) : a priori, le compilateur est capable de les retrouver, c'est lui qui a écrit le code assembleur qui les stockait en un endroit de la pile : il n'est pas compliqué pour lui de se rappeler d'où il les a mis.

*** Exercice 9

On prend un exemple, en supposant gentiment que les paramètres sont déjà dans les bons registres (on va quand même devoir lever cette hypothèse un moment.)

#+BEGIN_SRC mips
  pgcd:   ADDIU       R29, R29,-4
	  SW          R31,0(R29)

  loop:   BEQ         R4,R5,eloop
	  SLTU        R16,R4,R5
	  BEQ         R16,R0,else
	  SUB         R5,R5,R4
	  J           loop

  else:   SUB         R4,R4,R5
	  J           loop

  eloop:  OR          R2,R4,R0

  eplg:   LW          R31,0(R29)
	  ADDIU       R29,R29,4
	  JR          R31
#+END_SRC

*** Exercice 10

Mon idée, très verbeuse, linéaire, occupant beaucoup de registres, aimablement corrigée et commentée par mes camarades :

#+BEGIN_SRC mips
  tri:
	  ADDIU       R29,R29,-28
	  SW          R31,16(R29)

	  OR          R8,R0,R0

  loop1:
	  SUB         R12,R8,R5
	  BGEZ        R12,eloop1

	  SLL         R15,R8,2
	  ADD         R15,R4,R15

	  LW          R10,0(R15)
	  ADDI        R9,R8,1
  loop2:
	  SUB         R13,R9,R5
	  BGEZ        R13,eloop2
	  SLL         R24,R9,2
	  ADD         R24,R4,R24

	  LW          R14,0(R24)

	  ADDI        R9,R9,1
	  SUB         R25,R14,R10
	  BLEZ        R25,loop2

	  OR          R11,R10,R0
	  OR          R10,R14,R0
	  SW          R11,0(R24)

	  J           loop2

  eloop2:
	  SW          R10,0(R15)
	  ADDI        R8,R8,1
	  J           loop1

  eloop1:
	  OR          R2,R4,R0

  eplg:
	  LW          R31,0(R29)
	  ADDIU       R29,R29,4
	  JR          R31
#+END_SRC

Une autre version, par la prof, de son propre aveu assez sale. Mais utilise moins de registres.

#+BEGIN_SRC mips
  tri:
	  ADDIU       R29,R29,-20
	  SW          R31,16(R29)
	  OR          R2,R4,R0
	  BEQ         R5,R0,end_extloop   #On sort si le tableau est de taille 0
	  SLL         R12,R5,2            #Multiplication par 4
	  ADDU        R12,R12,R4          #Adresse fin de tableau

  extloop:
	  LW          R8,0(R4)            # max=a[i]
	  ADDIU       R9,R4,4             # calcul adresse élément i+1
	  BEQ         R9,R12,end_intloop

  intloop:
	  LW          R10,0(R9)           # charger a[i+1]
	  SLTU        R11,R8,R10          # max < a[j]
	  BEQ         R11,R0,endif
	  SW          R8,0(R9)            # On peut utiliser deux emplacements mémoire et un registre
	  OR          R8,R10,R0

  endif:
	  ADDIU       R9,R9,4             # j++
	  BNE         R9,R12,intloop

  end_intloop:
	  SW          R8,0(R4)
	  ADDIU       R4,R4,4
	  BNE         R4,R12,extloop

  end_extloop:
	  LW          R31,16(R29)
	  ADDIU       R29,R29,20
	  JR          R31
#+END_SRC





** TD 2

*** Aparté (ancien TD)

Rappel de pipeline

Partie I (Instruction Fetch) :
On va chercher le mot mémoire et on le met dans le registre IR (Instruction Register)

Partie D (Decode) :
On découpe l'instruction, on décode les numéros des registres concernés pour les identifier.
Le PC est manipulé ici, car on sait où est la prochaine instruction :
Soit PC++, soit saut à la bonne instruction.

Partie E (Execute) :
On fait les calculs.

Partie M (Memory Access) :
Seules les instructions Load et Store vont se servir de cet étage : on accède à la mémoire centrale en lecture et en écriture.

Partie W (Writeback) :
A ce moment seulement le résultat éventuel de l'opération est mis dans le registre destination. On peut aussi modifier ici les registres comme R31.


Le fait que les valeurs soient écrites dans le registre seulement à la fin du pipeline pose tout un tas de problème :


#+BEGIN_SRC mips
  loop:   LB          R9,0(R4)
	  BEQ         R9,R0,end_loop
	  ADDIU       R4,R4,1
	  ADDIU       R2,R2,1
	  J           strlen_loop
#+END_SRC

Ici, on a un problème :

R9 n'a sa bonne valeur qu'au moment du Writeback de la première instruction, qui arrive bien après le Decode de la deuxième instruction, moment où on a vraiment besoin que sa valeur soit bonne.

La solution naïve, c'est de geler l'instruction : mais si on fait ça, on peut ne pas savoir où on doit aller avant un petit moment, on doit retarder encore la prochaine instruction.

NOP : No operation : une espèce d'opération qui ne fait rien.

On a plusieurs manières de régler ce problème, chacune un peu imparfaite :
- Solution matérielle : bypass, acheminer la solution où on en a besoin dès qu'on peut (coûteux)
- Solution logicielle : réordonner les instructions
- Solution matérielle : Exécution spéculative : on peut commencer à exécuter certaines parties, sans vraiment savoir où on doit aller

#+BEGIN_DEFINITION
Définitions

Un cycle est donné par le temps nécessaire pour réaliser un étage de pipeline.

On compte le nombres de cycles nécessaires pour finir N instructions (avec N au moins 5 puisqu'on a 5 étages de pipeline). Le nombre minimal de cycles est de N, c'est le meilleur des cas.

Le CPI est défini par : #Cycles / #Instructions terminées

Le CPI utile est défini par : #Cycles / (#Instructions terminées - #Instructions NOP)

Le CPI utile est toujours supérieur au CPI. Plus le CPI est bas, mieux c'est (il ne peut pas valoir moins de 1)

Le CPI et le CPI utile sont *N-glissants* : ils sont définis sur la série des N instructions qu'on a pris comme base. Je shift ces N instructions vers la droite ou la gauche, le CPI bouge un peu.

Pour cette raison, ils sont définis en moyenne.
#+END_DEFINITION


* Séance 3, 08/10/2019

** TD 2

Pipeline (plus compliqué à dessiner).
On essaie de simplifier les schémas autant qu'il est possible.

*** Exercice 1

On dessine l'instruction SLL rd, rs, rt

|    | IFC    |         | DEC    |          |                   EXE |        | MEM |         | WBK |         |
|----+--------+---------+--------+----------+-----------------------+--------+-----+---------+-----+---------|
|    | ->     | I_RI    | >-     | I_RI     |                       |        |     |         |     |         |
|    |        |         | 1->    | SOPER_RD |                   >-1 |        |     |         |     |         |
|    |        |         |        |          | ALU : Shift 2 by 1 -> | RES_RE | >-  |         |     |         |
|    |        |         | 2->    | TOPER_RD |                   >-2 |        |     |         |     |         |
|    |        |         |        |          |                       |        | ->  | DATA_RM | >-  |         |
| PC | >-+4-> | PC      | >-+4-> | PC       |                       |        |     |         |     |         |
|    |        | R_V_CPU | >-1,2  |          |                       |        |     |         | ->  | R_V_CPU |

*** Exercice 2

Même question BLTZAL rs, label

|    | IFC    |         | DEC                                           |          | EXE |        | MEM |         | WBK |            |
|----+--------+---------+-----------------------------------------------+----------+-----+--------+-----+---------+-----+------------|
|    | ->     | I_RI    | >-2                                           |          |     |        |     |         |     |            |
|    |        |         | 1->                                           | SOPER_RD |     |        |     |         |     |            |
|    |        |         |                                               |          | ->  | RES_RE | >-  |         |     |            |
|    |        |         | 2->                                           | TOPER_RD |     |        |     |         |     |            |
|    |        |         |                                               |          |     |        | ->  | DATA_RM | >-  |            |
|    |        |         |                                               |          |     |        |     |         |     |            |
|    |        |         |                                               |          |     |        |     |         |     |            |
| PC | >-+4-> | PC      | >- +4 (si 1 >= 2) ou +4 + (2)*4 (si 1 < 2) -> | PC       |     |        |     |         |     |            |
|    |        | R_V_CPU | >-1                                           |          |     |        |     |         | ->  | R_V_CPU$31 |
|    |        |         | ->                      +4 (inconditionné) -> | IOPER_RD | >-  |        |     |         |     |            |


La mutliplication par quatre (en fait, toutes les puissances de 2) peut être fait dans l'étage décode.

*** Exercice 3

Une instruction nouvelle, qui n'existe pas dans le MIPS :
BEQPI (branch if equal and post increment)

BEQPI RS,RT,label

C'est possible, on peut faire le branchement dans DEC et l'incrémentation se fait dans EXE.

C'est possible, l'incrémentation est inconditionnelle.

|    | IFC    |         | DEC                                            |          | EXE  |        | MEM |         | WBK |         |
|----+--------+---------+------------------------------------------------+----------+------+--------+-----+---------+-----+---------|
|    | ->     | I_RI    | >-3                                            |          |      |        |     |         |     |         |
|    |        |         | 1->                                            | SOPER_RD |      |        |     |         |     |         |
|    |        |         |                                                |          | ->   | RES_RE | >-  |         |     |         |
|    |        |         | 2->                                            | TOPER_RD | >-++ |        |     |         |     |         |
|    |        |         |                                                |          |      |        | ->  | DATA_RM | >-  |         |
|    |        |         |                                                |          |      |        |     |         |     |         |
|    |        |         |                                                |          |      |        |     |         |     |         |
| PC | >-+4-> | PC      | >- +4 (si 1 != 2) ou +4 + (3)*4 (si 1 == 2) -> | PC       |      |        |     |         |     |         |
|    |        | R_V_CPU | >-1 et 2                                       |          |      |        |     |         | ->  | R_V_CPU |


*** Exercice 4

Une instruction nouvelle, qui n'existe pas dans le MIPS :
BEQPD (branch if equal and pre decrement)

BEQPD RS,RT,label

Pas possible : la décrémentation devrait être avant le branchement qui est fait dans l'étage DEC, donc dans l'étage DEC aussi, il faudrait y rajouter un additioneur, ce qui allongerait la durée de l'étage et donc de tous les étages.

A dire vrai, possible mais pas worth.

*** Exercice 5

ADD R3,R2,R1
ADD R3,R3,R1

A dire vrai, ces deux opérations sont comprimables en 1 :

ADD R3,R2,R1*2

On peut décaler la broche de R1 vers le poids fort de 1.

Mais là n'est pas la question.

|    | IFC    |         | DEC      |          |        EXE |        | MEM |         | WBK |         |
|----+--------+---------+----------+----------+------------+--------+-----+---------+-----+---------|
|    | ->     | I_RI    | >-       |          |            |        |     |         |     |         |
|    |        |         | 1->      | SOPER_RD |        >-1 |        |     |         |     |         |
|    |        |         |          |          | ALU 1+2 -> | RES_RE | >-  |         |     |         |
|    |        |         | 2->      | TOPER_RD |        >-2 |        |     |         |     |         |
|    |        |         |          |          |            |        | ->  | DATA_RM | >-  |         |
|    |        |         |          |          |            |        |     |         |     |         |
|    |        |         |          |          |            |        |     |         |     |         |
| PC | >-+4-> | PC      | >- +4 -> | PC       |            |        |     |         |     |         |
|    |        | R_V_CPU | >-1 et 2 |          |            |        |     |         | ->  | R_V_CPU |


|    | IFC+1  |         | DEC+1    |          |      EXE+1 |        | MEM+1 |         | WBK+1 |         |
|----+--------+---------+----------+----------+------------+--------+-------+---------+-------+---------|
|    |        |         |          |          | ->         | I_RE   |       |         |       |         |
|    |        |         | ->       | I_RD     | >-         |        |       |         |       |         |
|    | ->     | I_RI    | >-       |          |            |        |       |         |       |         |
|    |        |         | 1->      | SOPER_RD |        >-1 |        |       |         |       |         |
|    |        |         |          |          | ALU 1+2 -> | RES_RE | >-    |         |       |         |
|    |        |         | 2->      | TOPER_RD |        >-2 |        |       |         |       |         |
|    |        |         |          |          |            |        | ->    | DATA_RM | >-    |         |
|    |        |         |          |          |            |        |       |         |       |         |
|    |        |         |          |          |            |        |       |         |       |         |
| PC | >-+4-> | PC      | >- +4 -> | PC       |            |        |       |         |       |         |
|    |        | R_V_CPU | >-1 et 2 |          |            |        |       |         | ->    | R_V_CPU |


L'idée, c'est de récupérer le contenu de RES_RE de l'instant t pour le mettre dans SOPER_RD.
En terme de matériel, ça requiert un multiplexeur avec RES_RE et SOPER_RD en entrée et l'additioneur en sortie.

Quelles sont les conditions du mutliplexeurs : on veut comparer RS de l'instruction t et RD de l'instruction t-1.

On devrait avoir la même chose pour l'autre opérande :
Un multiplexeur avec RES_RE et TOPER_RD en entrée et l'additioneur en sortie.

Dans ce multiplexeur, on veut comparer RT de l'instruction t et RD de l'instruction t-1.

*** Exercice 6

ADD R0, R2, R11
ADD R3, R0, R11

Ici, on n'est pas censé avoir de problème : on ne peut pas écrire dans R0.

R0 est *toujours à jour !!!!!*, il ne peut jamais être modifié.

On doit préciser la condition du bypass :

on veut comparer RS de l'instruction t et RD de l'instruction t-1, et aucun de ces deux registres n'est le registre 0.

*** Exercice 7

LW R3,0(R2)
ADD R3,R3,R11

On a R3 disponible et à jour à la fin de l'étage M de l'instruction t.
On en a besoin au début de l'étage E de l'instruction t+1.

On va avoir besoin d'une instruction de gel.

On va la dessiner, si on peut.

|    | IFC    |         | DEC      |          | EXE        |        | MEM |         | WBK |         |
|----+--------+---------+----------+----------+------------+--------+-----+---------+-----+---------|
|    |        |         |          |          |            |        | ->  | I_RM    |     |         |
|    |        |         |          |          | ->         | I_RE   | >-  |         |     |         |
|    |        |         | ->       | I_RD     | >-         |        |     |         |     |         |
|    | *->    | I_RI    | >-       |          |            |        |     |         |     |         |
|    |        |         | 1->      | SOPER_RD | >-1        |        |     |         |     |         |
|    |        |         |          |          | ALU 1+2 -> | RES_RE | >-  |         |     |         |
|    |        |         | 2->      | TOPER_RD |            |        |     |         |     |         |
|    |        |         |          |          |            |        | *-> | DATA_RM | >-  |         |
|    |        |         | 3->      | IOPER_RD | >-2        |        |     |         |     |         |
|    |        |         |          |          |            |        |     |         |     |         |
| PC | >-+4-> | PC      | >- +4 -> | PC       |            |        |     |         |     |         |
|    |        | R_V_CPU | >-1 et 2 |          |            |        |     |         | ->  | R_V_CPU |


|    | IFC+1  |         | DEC+1    |          | GEL  |          | EXE +1 |        | MEM+1 |         | WBK+1 |         |
|----+--------+---------+----------+----------+------+----------+--------+--------+-------+---------+-------+---------|
|    |        |         |          |          |      |          |        |        | ->    | I_RM    |       |         |
|    |        |         |          |          |      |          | ->     | I_RE   | >-    |         |       |         |
|    |        |         | ->       | I_RD     | >--> | I_RD     | >-     |        |       |         |       |         |
|    | ->     | I_RI    | >-       |          |      |          |        |        |       |         |       |         |
|    |        |         | 1->      | SOPER_RD | >--> | SOPER_RD | >-1    |        |       |         |       |         |
|    |        |         |          |          |      |          | 1+2->  | RES_RE | >-    | RES     |       |         |
|    |        |         | 2->      | TOPER_RD | >--> | TOPER_RD | >-2    |        |       |         |       |         |
|    |        |         |          |          |      |          |        |        | ->    | DATA_RM | >-    |         |
|    |        |         |          |          |      |          |        |        |       |         |       |         |
|    |        |         |          |          |      |          |        |        |       |         |       |         |
| PC | >-+4-> | PC      | >- +4 -> | PC       |      |          |        |        |       |         |       |         |
|    |        | R_V_CPU | >-1 et 2 |          |      |          |        |        |       |         | ->    | R_V_CPU |

Le cycle de gel est déclenché sssi (une partie masquée de) I_RD @t == (une partie masquée de) I_RE @t-1

*** Exercice 8

#+BEGIN_SRC mips
	  ADDIU       $2,$0,4
	  LUI         $3,0x00c
	  ADD         $2,$2,$2
	  ORI         $3,$3, 0x4568
	  LW          $2,0($3)
	  LBU         $2,0($2)
	  ORI         $2,$2, 0x0001
	  BLTZAL      $2,suite
	  ADDU        $0,$0,$0
  suite:
	  JR          $31
	  ADDU        $31,$31,-8
#+END_SRC

Dépendances :

- La 3 de la 1
- La 4 de la 2
- La 5 de la 4 et de la 3
- La 6 de la 5
- La 7 de la 6
- La 8 de la 7

- La 10 dépend de la 8 (BLTZAL)
- La 11 est exécutée no matter what, malgré le jump (delayed slot)

Schéma simplifié :

|        | 1 | 2 | 3 | 4     | 5     | 6    | 7     | 8     | 9    | 10    | 11       | 12   | 13    | 14    | 15   | 16    | 17    | 18   | 19 | 20 | 21 |
|--------+---+---+---+-------+-------+------+-------+-------+------+-------+----------+------+-------+-------+------+-------+-------+------+----+----+----|
| ADDIU  | I | D | E | M >-2 | W     |      |       |       |      |       |          |      |       |       |      |       |       |      |    |    |    |
| LUI    |   | I | D | E     | M >-2 | W    |       |       |      |       |          |      |       |       |      |       |       |      |    |    |    |
| ADD    |   |   | I | D     | E     | -> M | W     |       |      |       |          |      |       |       |      |       |       |      |    |    |    |
| ORI    |   |   |   | I     | D     | -> E | M >-1 | W     |      |       |          |      |       |       |      |       |       |      |    |    |    |
| LW     |   |   |   |       | I     | D    | -> E  | M >-1 | W    |       |          |      |       |       |      |       |       |      |    |    |    |
| LBU    |   |   |   |       |       | I    | D     | O     | -> E | M >-1 | W        |      |       |       |      |       |       |      |    |    |    |
| ORI    |   |   |   |       |       |      | I     | O     | D    | O     | -> E >-1 | M    | W     |       |      |       |       |      |    |    |    |
| BLTZAL |   |   |   |       |       |      |       | O     | I    | O     | O        | -> D | E >-2 | M >-3 | W    |       |       |      |    |    |    |
| ADDU   |   |   |   |       |       |      |       |       |      |       |          | I    | D     | E     | M    | W     |       |      |    |    |    |
| JR     |   |   |   |       |       |      |       |       |      |       |          |      | I     | -> D  | E    | M     | W     |      |    |    |    |
| ADDU   |   |   |   |       |       |      |       |       |      |       |          |      |       | I     | -> D | E >-1 | M >-2 | W    |    |    |    |
| JK     |   |   |   |       |       |      |       |       |      |       |          |      |       |       | I    | O     | -> D  | E    | M  | W  |    |
| ADDU   |   |   |   |       |       |      |       |       |      |       |          |      |       |       |      | O     | I     | -> D | E  | M  |  W |

*** Exercice 9

Ordre 1 : E@t -> E@t+1

|                    | 1 | 2 | 3     | 4    | 5 | 6 |   |
|--------------------+---+---+-------+------+---+---+---|
| ORI R3, R4, 0x0001 | I | D | E >-1 | M    | W |   |   |
| LW R5, 0(R3)       |   | I | D     | -> E | M | W |   |

Ici, le bypass est du côté RS

Pour un bypass nécessaire en RT, on regardera :

#+BEGIN_SRC mips
	  ORI         $3,$4,0x0001
	  ADD         $5,$6,$3
#+END_SRC

Ordre 2 : M@t -> E@t+2

|                | 1 | 2 | 3 | 4     | 5    | 6 | 7 |
|----------------+---+---+---+-------+------+---+---|
| LW R3, 0(R5)   | I | D | E | M >-2 | W    |   |   |
| NOP            |   | I | D | E     | M    | W |   |
| ADD R6, R3, R0 |   |   | I | D     | -> E | M | W |

Pour un bypass nécessaire en RT, on regardera :

#+BEGIN_SRC mips
	  LW          $3,0($5)
	  NOP
	  ADD         $6,$0,$3
#+END_SRC

Ordre 2 : E@t -> D@t+2

|                   | 1 | 2 | 3     | 4    | 5 | 6 | 7 |
|-------------------+---+---+-------+------+---+---+---|
| ADD R3, R4, R5    | I | D | E >-2 | M    | W |   |   |
| NOP               |   | I | D     | E    | M | W |   |
| BEQ R3, R7, label |   |   | I     | -> D | E | M | W |

#+BEGIN_SRC mips
	  ADD         $3,$4,$5
	  NOP
	  BEQ         $7,$3,label
#+END_SRC

Ordre 3 : M@t -> D@t+3

|                   | 1 | 2 | 3 | 4     | 5    | 6 | 7 | 8 |
|-------------------+---+---+---+-------+------+---+---+---|
| LW R3, 0(R5)      | I | D | E | M >-3 | W    |   |   |   |
| NOP               |   | I | D | E     | M    | W |   |   |
| NOP               |   |   | I | D     | E    | M | W |   |
| BEQ R3, R7, label |   |   |   | I     | -> D | E | M | W |

Pour un autre exemple, avec RT :

#+BEGIN_SRC mips
	  LW          $3,0($5)
	  NOP
	  NOP
	  BEQ         $6,$3,label
#+END_SRC

*** Exercice 10

[pour s'entraîner]


